{"ast":null,"code":"var _jsxFileName = \"D:\\\\dev\\\\uno\\\\src\\\\Components\\\\InputDataList\\\\InputDataSelect.jsx\",\n  _s = $RefreshSig$();\nimport { nanoid } from \"nanoid\";\nimport { useState } from \"react\";\nimport styles from \"./styles.module.css\";\nimport { Option } from \"../../UI/Option/Option\";\nimport { SelectedCity } from \"../SelectedCities/SelectedCities\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const InputDataSelect = _ref => {\n  _s();\n  let {\n    setForm,\n    label,\n    availableCities,\n    cityFranIds,\n    city\n  } = _ref;\n  const [isOpen, setIsOpen] = useState(false);\n  function toggleIsOpen() {\n    setIsOpen(!isOpen);\n  }\n  const handleChange = e => {\n    const target = e.target.value;\n    if (cityFranIds.includes(target)) {\n      const newValue = city.concat(target);\n      setForm(newValue);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.input_container,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: () => toggleIsOpen(),\n      onChange: handleChange,\n      className: styles.form_input,\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), city.map(id => /*#__PURE__*/_jsxDEV(SelectedCity, {\n      id: id,\n      onclick: deleteCity\n    }, nanoid(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this)), isOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      id: label,\n      className: styles.optionContainer,\n      children: availableCities === null || availableCities === void 0 ? void 0 : availableCities.map(el => {\n        return /*#__PURE__*/_jsxDEV(Option, {\n          value: el,\n          label: el,\n          onClick: handleChange\n        }, nanoid(), false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n_s(InputDataSelect, \"+sus0Lb0ewKHdwiUhiTAJFoFyQ0=\");\n_c = InputDataSelect;\nvar _c;\n$RefreshReg$(_c, \"InputDataSelect\");","map":{"version":3,"names":["nanoid","useState","styles","Option","SelectedCity","InputDataSelect","setForm","label","availableCities","cityFranIds","city","isOpen","setIsOpen","toggleIsOpen","handleChange","e","target","value","includes","newValue","concat","input_container","form_input","map","id","deleteCity","optionContainer","el"],"sources":["D:/dev/uno/src/Components/InputDataList/InputDataSelect.jsx"],"sourcesContent":["import { nanoid } from \"nanoid\";\r\nimport { useState } from \"react\";\r\nimport styles from \"./styles.module.css\";\r\nimport { Option } from \"../../UI/Option/Option\";\r\nimport { SelectedCity } from \"../SelectedCities/SelectedCities\";\r\n\r\nexport const InputDataSelect = ({\r\n  setForm,\r\n  label,\r\n  availableCities,\r\n  cityFranIds,\r\n  city,\r\n}) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  function toggleIsOpen() {\r\n    setIsOpen(!isOpen);\r\n  }\r\n  const handleChange = (e) => {\r\n    const target = e.target.value;\r\n\r\n    if (cityFranIds.includes(target)) {\r\n      const newValue = city.concat(target);\r\n      setForm(newValue);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={styles.input_container}>\r\n      <div\r\n        onClick={() => toggleIsOpen()}\r\n        onChange={handleChange}\r\n        className={styles.form_input}>\r\n        {label}\r\n      </div>\r\n      {city.map((id) => (\r\n        <SelectedCity\r\n          id={id}\r\n          key={nanoid()}\r\n          onclick={deleteCity}\r\n        />\r\n      ))}\r\n      {isOpen && (\r\n        <div\r\n          id={label}\r\n          className={styles.optionContainer}>\r\n          {availableCities?.map((el) => {\r\n            return (\r\n              <Option\r\n                value={el}\r\n                label={el}\r\n                key={nanoid()}\r\n                onClick={handleChange}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n"],"mappings":";;AAAA,SAASA,MAAM,QAAQ,QAAQ;AAC/B,SAASC,QAAQ,QAAQ,OAAO;AAChC,OAAOC,MAAM,MAAM,qBAAqB;AACxC,SAASC,MAAM,QAAQ,wBAAwB;AAC/C,SAASC,YAAY,QAAQ,kCAAkC;AAAC;AAEhE,OAAO,MAAMC,eAAe,GAAG,QAMzB;EAAA;EAAA,IAN0B;IAC9BC,OAAO;IACPC,KAAK;IACLC,eAAe;IACfC,WAAW;IACXC;EACF,CAAC;EACC,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EAC3C,SAASY,YAAY,GAAG;IACtBD,SAAS,CAAC,CAACD,MAAM,CAAC;EACpB;EACA,MAAMG,YAAY,GAAIC,CAAC,IAAK;IAC1B,MAAMC,MAAM,GAAGD,CAAC,CAACC,MAAM,CAACC,KAAK;IAE7B,IAAIR,WAAW,CAACS,QAAQ,CAACF,MAAM,CAAC,EAAE;MAChC,MAAMG,QAAQ,GAAGT,IAAI,CAACU,MAAM,CAACJ,MAAM,CAAC;MACpCV,OAAO,CAACa,QAAQ,CAAC;IACnB;EACF,CAAC;EAED,oBACE;IAAK,SAAS,EAAEjB,MAAM,CAACmB,eAAgB;IAAA,wBACrC;MACE,OAAO,EAAE,MAAMR,YAAY,EAAG;MAC9B,QAAQ,EAAEC,YAAa;MACvB,SAAS,EAAEZ,MAAM,CAACoB,UAAW;MAAA,UAC5Bf;IAAK;MAAA;MAAA;MAAA;IAAA,QACF,EACLG,IAAI,CAACa,GAAG,CAAEC,EAAE,iBACX,QAAC,YAAY;MACX,EAAE,EAAEA,EAAG;MAEP,OAAO,EAAEC;IAAW,GADfzB,MAAM,EAAE;MAAA;MAAA;MAAA;IAAA,QAGhB,CAAC,EACDW,MAAM,iBACL;MACE,EAAE,EAAEJ,KAAM;MACV,SAAS,EAAEL,MAAM,CAACwB,eAAgB;MAAA,UACjClB,eAAe,aAAfA,eAAe,uBAAfA,eAAe,CAAEe,GAAG,CAAEI,EAAE,IAAK;QAC5B,oBACE,QAAC,MAAM;UACL,KAAK,EAAEA,EAAG;UACV,KAAK,EAAEA,EAAG;UAEV,OAAO,EAAEb;QAAa,GADjBd,MAAM,EAAE;UAAA;UAAA;UAAA;QAAA,QAEb;MAEN,CAAC;IAAC;MAAA;MAAA;MAAA;IAAA,QAEL;EAAA;IAAA;IAAA;IAAA;EAAA,QACG;AAEV,CAAC;AAAC,GArDWK,eAAe;AAAA,KAAfA,eAAe;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}